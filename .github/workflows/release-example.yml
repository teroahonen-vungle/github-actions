name: 'Create release'
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  CHART_DIR: example/helm/example
  CHART: example
  REPO: charts/example

jobs:
  get-info:
    name: Get release info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      commit-id: ${{ steps.commit-id.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get release
        id: release
        run: |
          echo "version=$(echo ${{ github.ref }} | cut -d/ -f3)" >> $GITHUB_OUTPUT
      - name: Get commit SHA
        id: commit-id
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  publish-helm:
    name: Publish Helm chart
    runs-on: ubuntu-latest
    needs:
    - get-info
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.29.2

      - name: Update Chart.yaml
        run: |
          yq -i e '.version = "${{ needs.get-info.outputs.version }}",.appVersion = "${{ needs.get-info.outputs.version }}"' ./example/helm/example/Chart.yaml

      - name: Update image.tag
        run: |
          yq -i e '.image.tag = "${{ needs.get-info.outputs.version }}"' ./example/helm/example/values.yaml

      - name: Package and push helm chart to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm package ${{env.CHART_DIR}}
          helm push ${{env.CHART}}-${{ needs.get-info.outputs.version }}.tgz oci://$REGISTRY/charts

      - name: Add extra tags to the chart
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ env.REPO }} --image-ids imageTag=${{ needs.get-info.outputs.version }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
          echo $MANIFEST
          aws ecr put-image --repository-name ${{ env.REPO }} --image-tag ${{ needs.get-info.outputs.version }}-${{ needs.get-info.outputs.commit-id }} --image-manifest-media-type 'application/vnd.oci.image.manifest.v1+json' --image-manifest $MANIFEST
  publish-image:
    name: Publish container image
    runs-on: ubuntu-latest
    needs:
    - get-info
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          logout: false
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: ./example/docker
          push: true
          file: ./example/docker/Dockerfile
          platforms: linux/amd64
          tags: |
            teroahonen/rollout:${{needs.get-info.outputs.version}}
  deploy-to-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs:
    - get-info
    - publish-image
    - publish-helm
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: deploy
          persist-credentials: true
          repository: Vungle/PE
          token: ${{secrets.GH_TOKEN }}
          fetch-depth: 0
      - name: List files
        run: |
          ls -la apps
      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.29.2
      - name: Update chart versions
        run: |
          yq -i e '.spec.source.targetRevision = "${{ needs.get-info.outputs.version }}"' ./apps/api/example-staging-app.yml
      - name: Commit version update changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./apps/api/*
          git commit -m "Update chart version to ${{ needs.get-info.outputs.version }}" --allow-empty
          git push -f origin deploy
  create-deploy-ticket:
    name: Create DEPLOY ticket
    needs:
    - get-info
    - deploy-to-staging
    runs-on: ubuntu-latest
    steps:
    - name: Login
      id: login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    - name: Create ticket
      id: create
      uses: atlassian/gajira-create@master
      with:
        project: DEPLOY
        issuetype: 'Standard Tech Deployment'
        summary: |
          Deploy example version ${{ needs.get-info.outputs.version }}
        description: |
          Deploy example version ${{ needs.get-info.outputs.version }}
        fields: '{"components":[{"name":"Example"}],"customfield_13773": [{"value":"Infrastructure"}], "customfield_13780": "Release revenue impact", "customfield_13806": [{"accountId":"60b0f6152ec5ce0070ac5370"}], "customfield_13899": "2.0.0", "customfield_13900":"${{ needs.get-info.outputs.version }}", "customfield_13901":"example", "customfield_13904":"Traffic interval", "customfield_13905":"Traffic state",  "customfield_13906":"Traffic step", "customfield_13907":"Traffic target","customfield_13908":"2022-11-14T02:00+02:00"}'