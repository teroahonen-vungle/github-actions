name: Start deployment
on:
  pull_request:
    branches:
    - 'main'
jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version
        uses: teroahonen-vungle/tag-version-action@v1.0.0
        id: version
        with:
          command: 'minor'
          args: '-fis -B PR-${{ github.event.number }}'
  build-container:
    runs-on: ubuntu-latest
    needs:
    - get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          logout: false
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: ./example/docker
          push: true
          file: ./example/docker/Dockerfile
          platforms: linux/amd64
          tags: |
            teroahonen/rollout:${{needs.get-version.outputs.version}}

  test-helm:
    runs-on: ubuntu-latest
    needs:
    - get-version
    - build-container
    strategy:
      matrix:
        k8s:
          - v1.18.20
          - v1.22.5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Print version
        run: |
          echo ${{ needs.get-version.outputs.version }}
      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.29.2
      - name: Update Chart.yaml
        run: |
          yq -i e '.version = "${{ needs.get-version.outputs.version }}",.appVersion = "${{ needs.get-version.outputs.version }}"' ./example/helm/example/Chart.yaml
      - name: Update image.tag
        run: |
          yq -i e '.image.tag = "${{ needs.get-version.outputs.version }}"' ./example/helm/example/values.yaml
      - name: Create kind ${{ matrix.k8s }} cluster
        uses: helm/kind-action@v1.3.0
        with:
          version: v0.16.0
          node_image: kindest/node:${{ matrix.k8s }}
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      - name: Install Argo Rollouts
        run: |
          kubectl create namespace argo-rollouts
          kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml

      #- name: Add elastic repo
      #  run: helm repo add elastic https://helm.elastic.co
      - name: Run chart-testing (install)
        run: ct install --chart-dirs=example/helm/example --charts example/helm/example --target-branch=main --debug=true --helm-extra-args="--timeout 300s"
  helm-docs:
    runs-on: ubuntu-latest
    env:
      CHART_DIR: example/helm/example
    needs:
    - get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check if docs need update
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            helm:
             - 'example/helm/**'
      - name: Create short version
        if: steps.changes.outputs.helm == 'true'
        id: short_version
        run: |
          echo "version=$(${{ needs.get-version.outputs.version }} | cut -d'-' -f 1)" >> $GITHUB_OUTPUT
      - name: Update Chart.yaml for docs
        if: steps.changes.outputs.helm == 'true'
        run: |
          yq -i e '.version = "${{ steps.short_version.outputs.version }}",.appVersion = "${{ steps.short_version.outputs.version }}"' ${{env.CHART_DIR}}/Chart.yaml
      - name: Update image.tag for docs
        if: steps.changes.outputs.helm == 'true'
        run: |
          yq -i e '.image.tag = "${{ steps.short_version.outputs.version }}"' ${{env.CHART_DIR}}/values.yaml

      - name: Update docs
        if: steps.changes.outputs.helm == 'true'
        run: |
          chmod +x ./.github/helm-docs.sh
          ./.github/helm-docs.sh ${{env.CHART_DIR}}

      - name: Commit doc changes
        if: steps.changes.outputs.helm == 'true'
        run: |
          git fetch --all
          git checkout ${{github.head_ref}}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{env.CHART_DIR}}/*
          git commit -m "Update charts version and docs" --allow-empty
          git push -f origin ${{github.head_ref}}
