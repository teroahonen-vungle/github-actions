{{- range $deploymentName, $deployment := .Values.deployments }}
{{- $namespace := print "-" $.Release.Namespace }}
{{- $chartName := print $.Chart.Name "-" }}
{{- if (and (gt $deployment.replicas 0.0) (or (eq $deploymentName (trimSuffix $namespace (trimPrefix $chartName $.Release.Name))) $.Values.multiDeploymentEnabled)) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "slydell.labels" $ | nindent 4 }}
    deployment: {{ $deploymentName }}
  name: {{ template "slydell.fullname" $ }}
spec:
  replicas: {{ $deployment.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ default $deployment.maxUnavailable "10%" }}
      maxSurge: {{ default $deployment.maxSurge "50%" }}
  selector:
    matchLabels: {{ include "slydell.selectorLabels" $ | nindent 6 }}
      deployment: {{ $deploymentName }}
  template:
    metadata:
      labels: {{ include "slydell.labels" $ | nindent 8 }}
        deployment: {{ $deploymentName }}
    spec:
      serviceAccountName: {{ $.Release.Name }}
      imagePullSecrets:
      - name: {{ $.Values.imagePullSecrets }}
      containers:
      - name: {{ $.Chart.Name }}
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        args:
        {{- range $deployment.image.args }}
          - {{ . | quote }}
        {{- end }}
        ports:
          - containerPort: {{ $.Values.service.targetPort }}
        livenessProbe:
          httpGet:
            path: /api/v1/status
            port: {{ $.Values.service.probePort }}
          initialDelaySeconds: {{ $.Values.initialDelaySeconds }}
        readinessProbe:
          httpGet:
            path:  /api/v1/status
            port: {{ $.Values.service.probePort }}
          initialDelaySeconds: {{ $.Values.initialDelaySeconds }}
        envFrom:
        - configMapRef:
            name: {{ template "slydell.fullname" $ }}
        - secretRef:
            name: {{ template "slydell.secret" $ }}
        {{- if $deployment.extraSecret }}
        - secretRef:
            name: {{ default (include "slydell.secret" $) $deployment.extraSecret }}
        {{- end }}
        env:
        - name: SLYDELL_KUBE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SLYDELL_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SLYDELL_KUBE_BUILD_VERSION
          value: "{{ $deployment.image.tag }}"
        - name: NODE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
  {{- if $.Values.isCI }}
        - name: SLYDELL_MONGO_NAME
          value: "{{ $.Values.mongoNamePrefix }}{{ $.Release.Namespace }}{{ $.Values.mongoNameSuffix }}"
        - name: SLYDELL_MONGO_USERNAME
          value: {{ $.Values.mongoUserName }}
        - name: SLYDELL_MONGO_PASSWORD
          value: {{ $.Values.mongoPassword }}
        - name: SLYDELL_AUTHENTICATOR_ENDPOINT
          value: "slydell-authenticator-{{ $.Release.Namespace }}-slydell.{{ $.Release.Namespace }}"
  {{- end }}
        resources:
{{ toYaml $deployment.resources | indent 10 }}
---
{{ end }}
{{ end }}
